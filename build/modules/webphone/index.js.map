{"version":3,"sources":["modules/webphone/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/rc-module';\nimport SymbolMap from '../../lib/symbol-map';\nimport Enum from '../../lib/enum';\nimport webphoneActions from './webphone-actions';\nimport callActions from './call-actions';\nimport getReducer from './webphone-reducer';\nimport RingCentralWebphone from 'ringcentral-web-phone';\nimport webphoneStatus from './webphone-status';\nimport callStatus from './call-status';\n\nimport { authEventTypes } from '../auth/auth-events';\nimport { webphoneEvents } from './webphone-events';\n\nconst symbols = new SymbolMap([\n  'api',\n  'auth',\n  'platform',\n  'emitter',\n  'settings',\n  'phoneInstance',\n]);\n\nconst ENUMS = new Enum({\n  webphoneStatus,\n  callStatus,\n});\n\nasync function initPhoneInstance() {\n  const info = await this[symbols.platform]\n    .post('/client-info/sip-provision', {\n      sipInfo: [{ transport: 'WSS' }],\n    })\n    .then(res => res.json());\n  return new RingCentralWebphone(info, {\n    logLevel: 0,\n    audioHelper: {\n      enabled: true,\n    },\n  });\n}\n\nasync function record(flag = true) {\n  if (!flag) {\n    await this.currentSession.stopRecord();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.stopRecord,\n      },\n    });\n  } else {\n    await this.currentSession.startRecord();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.record,\n      },\n    });\n  }\n}\n\nasync function mute(flag = true) {\n  if (!flag) {\n    await this.currentSession.unmute();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.unmute,\n      },\n    });\n  } else {\n    await this.currentSession.mute();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.mute,\n      },\n    });\n  }\n}\n\nasync function hold(flag = true) {\n  if (!flag) {\n    await this.currentSession.unhold();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.unhold,\n      },\n    });\n  } else {\n    await this.currentSession.hold();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.hold,\n      },\n    });\n  }\n}\n\nasync function park() {\n  await this.currentSession.park();\n  this.store.dispatch({\n    type: this.actions.callOperation,\n    operation: {\n      type: callActions.park,\n    },\n  });\n}\n\nasync function transfer(number) {\n  this.checkSession();\n  await this.currentSession.transfer(number);\n  this.store.dispatch({\n    type: this.actions.callOperation,\n    operation: {\n      type: callActions.transfer,\n      payload: {\n        number,\n      },\n    },\n  });\n}\n\nasync function flip(number) {\n  this.checkSession();\n  await this.currentSession.flip(number);\n  this.store.dispatch({\n    type: this.actions.callOperation,\n    operation: {\n      type: callActions.flip,\n      payload: {\n        number,\n      },\n    },\n  });\n}\n\nasync function dtmf(number) {\n  this.checkSession();\n  await this.currentSession.dtmf(number);\n  this.store.dispatch({\n    type: this.actions.callOperation,\n    operation: {\n      type: callActions.dtmf,\n      payload: {\n        number,\n      },\n    },\n  });\n}\n\nasync function operations(name, ...args) {\n  const actions = { record, mute, hold, park, transfer, flip, dtmf };\n  this.checkSession();\n  try {\n    await actions[name].call(this, ...args);\n  } catch (error) {\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.error,\n        error,\n      },\n    });\n    this.emit(webphoneEvents[name]);\n    // TODO: needed?\n    throw error;\n  }\n}\n\nexport default class Webphone extends RcModule {\n  constructor(options) {\n    super({\n      ...options,\n      actions: webphoneActions,\n    });\n    const {\n      api,\n      platform,\n      settings,\n      auth,\n    } = options;\n    this[symbols.api] = api;\n    this[symbols.platform] = platform;\n    this[symbols.settings] = settings;\n    this[symbols.auth] = auth;\n\n    this.currentSession = null;\n    this.isRegistered = false;\n\n    // TODO: commented out until setting module completed\n    // settings.registerReducer('webphone', getWebphoneReducer())\n    this[symbols.auth].on(authEventTypes.loginStatusChanged, async () => {\n      this[symbols.phoneInstance] = await this::initPhoneInstance();\n      this[symbols.phoneInstance].userAgent.on('registered', () => {\n        // sip will fire multiple registered events, only dispatch one register action to state.\n        // TODO: is this isRegistered state needed to be store as instance variable\n        //       or just check store state\n        if (!this.isRegistered) {\n          this.store.dispatch({\n            type: this.actions.registerSuccess,\n          });\n          this.emit(webphoneEvents.registerSuccessed);\n        }\n        this.isRegistered = this[symbols.phoneInstance].userAgent.isRegistered();\n      });\n      this[symbols.phoneInstance].userAgent.on('unregistered', () => {\n        this.isRegistered = this[symbols.phoneInstance].userAgent.isRegistered();\n        this.store.dispatch({\n          type: this.actions.unregister,\n          operation: {\n            type: callActions.clear,\n          },\n        });\n      });\n      this[symbols.phoneInstance].userAgent.on('registrationFailed', (error) => {\n        this.store.dispatch({\n          type: this.actions.registerError,\n          error,\n        });\n        this.emit(webphoneEvents.registerFailed);\n      });\n      this[symbols.phoneInstance].userAgent.on('invite', (session) => {\n        this.currentSession = session;\n        this.listenSessionEvents();\n        this.store.dispatch({\n          type: this.actions.callIncoming,\n          payload: {\n            remoteIdentity: session.remoteIdentity,\n            localIdentity: session.localIdentity,\n          },\n        });\n        this.emit(webphoneEvents.callIncoming);\n      });\n    });\n  }\n\n  get reducer() {\n    return getReducer(this.prefix);\n  }\n\n  get enums() {\n    return ENUMS;\n  }\n\n  /**\n   * Make a phone call, this method should be called in registerSuccess state\n   * @param {string} toNumber\n   * @param {string} [fromNumber]\n   * @return {Session}\n   */\n  async call({ toNumber, fromNumber, media }) {\n    // Check status\n    if (!this[symbols.phoneInstance]) {\n      throw Error('not registered');\n    }\n    this.store.dispatch({\n      type: this.actions.call,\n      payload: {\n        toNumber,\n        fromNumber,\n      },\n    });\n    this.emit(webphoneEvents.callConnecting);\n    this.currentSession = this[symbols.phoneInstance].userAgent.invite(toNumber, {\n      media: {\n        render: media,\n      },\n    });\n    this.listenSessionEvents();\n    try {\n      await this.currentSession;\n    } catch (error) {\n      console.error(error);\n      this.store.dispatch({\n        type: this.actions.callError,\n        error,\n      });\n      this.emit(webphoneEvents.callFailed);\n    }\n    return this.currentSession;\n  }\n\n  /**\n   * Accept a phone call, this method should be called when call is incoming\n   * @param {Object} media, see https://github.com/ringcentral/ringcentral-web-phone#accepting-incoming-call\n   * @return {Promise}\n   */\n  async accept(media) {\n    this.checkSession();\n    try {\n      await this.currentSession.accept(media);\n    } catch (error) {\n      // TODO\n      console.error(error);\n    }\n  }\n\n  async bye() {\n    this.checkSession();\n    try {\n      await this.currentSession.terminate();\n    } catch (error) {\n      // TODO\n      console.error(error);\n    }\n  }\n\n  async record(flag) {\n    operations.call(this, 'record', flag);\n  }\n\n  async mute(flag) {\n    operations.call(this, 'mute', flag);\n  }\n\n  async hold(flag) {\n    operations.call(this, 'hold', flag);\n  }\n\n  async park(flag) {\n    operations.call(this, 'park', flag);\n  }\n\n  async transfer(number) {\n    operations.call(this, 'transfer', number);\n  }\n\n  async flip(number) {\n    operations.call(this, 'flip', number);\n  }\n\n  async dtmf(number) {\n    operations.call(this, 'dtmf', number);\n  }\n\n  loadRingAudio({ incoming, outgoing }) {\n    this[symbols.phoneInstance].userAgent.audioHelper.loadAudio({\n      incoming,\n      outgoing,\n    });\n  }\n\n  checkSession() {\n    if (!this.currentSession) {\n      this.store.dispatch({\n        type: this.actions.sessionError,\n      });\n      throw Error('No active session');\n    }\n  }\n\n  /**\n   * Internal method for listen session events\n   */\n  listenSessionEvents() {\n    this.currentSession.on('accepted', (response) => {\n      // accepted event for outbound call will returne a incomingResponse\n      if (response.data) {\n        this.store.dispatch({\n          type: this.actions.callConnect,\n          payload: {\n            remoteIdentity: response.to,\n            localIdentity: response.from,\n          },\n        });\n      // accepted event for inbound call will only contain a raw sip data\n      } else {\n        this.store.dispatch({\n          type: this.actions.callAccept,\n        });\n      }\n      this.emit(webphoneEvents.callConnected);\n    });\n    // all situation about call terminated except 'call cancel'\n    this.currentSession.on('terminated', (response, cause) => {\n      this.store.dispatch({\n        type: this.actions.callEnd,\n        error: cause,\n      });\n      this.currentSession = null;\n    });\n    // when we call out and cancel the phone call\n    this.currentSession.on('cancel', (response, cause) => {\n      this.store.dispatch({\n        type: this.actions.callEnd,\n        error: cause,\n      });\n      this.currentSession = null;\n    });\n    // should not need\n    this.currentSession.on('bye', (response) => {\n      this.store.dispatch({\n        type: this.actions.callEnd,\n      });\n      this.currentSession = null;\n    });\n  }\n}\n"]}