{"version":3,"sources":["modules/subscription.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAM,WAAW,uBAAjB;AACA,IAAM,UAAU,uBAAhB;;IAEqB,Y;;;AACnB,8BAEG;AAAA,QADD,GACC,QADD,GACC;AAAA;;AAAA,sHACK,IAAI,kBAAJ,EADL;;AAGD,UAAK,OAAL,IAAgB,mBAAhB;AACA,UAAK,QAAL,IAAiB,mBAAjB;AACA,UAAK,IAAL,CAAU,EAAV,CAAa,MAAK,MAAL,CAAY,YAAzB,EAAuC,aAAK;AAC1C,UAAI,MAAK,QAAL,EAAe,GAAf,CAAmB,EAAE,KAArB,CAAJ,EAAiC;AAC/B,cAAK,QAAL,EAAe,GAAf,CAAmB,EAAE,KAArB,EAA4B,OAA5B,CAAoC,mBAAW;AAC7C,cAAI;AACF,oBAAQ,CAAR;AACD,WAFD,CAEE,OAAO,CAAP,EAAU;AACV,oBAAQ,KAAR,wEACuE,EAAE,KADzE,SAEE,CAFF;AAID;AACF,SATD;AAUD;AACF,KAbD;AALC;AAmBF;;;;8BAIS,K,EAAO,O,EAAS;AACxB,UAAI,SAAS,OAAO,OAAP,KAAmB,UAAhC,EAA4C;AAC1C,YAAI,CAAC,KAAK,QAAL,EAAe,GAAf,CAAmB,KAAnB,CAAL,EAAgC;AAC9B,eAAK,QAAL,EAAe,GAAf,CAAmB,KAAnB,EAA0B,mBAA1B;AACD;AACD,YAAI,CAAC,KAAK,OAAL,EAAc,GAAd,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,eAAK,OAAL,EAAc,GAAd,CAAkB,KAAlB;AACA,eAAK,IAAL,CAAU,eAAV,CAA0B,oBAAW,KAAK,OAAL,CAAX,CAA1B;AACA,eAAK,IAAL,CAAU,QAAV;AACD;AACD,aAAK,QAAL,EAAe,GAAf,CAAmB,KAAnB,EAA0B,GAA1B,CAA8B,OAA9B;AACD;AACF;;;wBAfY;AACX,aAAO,KAAK,IAAL,CAAU,MAAjB;AACD;;;;;kBAzBkB,Y","file":"subscription.js","sourcesContent":["import Wrapper from '../lib/wrapper';\n\nconst HANDLERS = Symbol();\nconst FILTERS = Symbol();\n\nexport default class Subscription extends Wrapper {\n  constructor({\n    sdk,\n  }) {\n    super(sdk.createSubscription());\n\n    this[FILTERS] = new Set();\n    this[HANDLERS] = new Map();\n    this.base.on(this.events.notification, m => {\n      if (this[HANDLERS].has(m.event)) {\n        this[HANDLERS].get(m.event).forEach(handler => {\n          try {\n            handler(m);\n          } catch (e) {\n            console.error(\n              `Error occurs when invoking subscription notification handler for \"${m.event}\":`,\n              e,\n            );\n          }\n        });\n      }\n    });\n  }\n  get events() {\n    return this.base.events;\n  }\n  subscribe(event, handler) {\n    if (event && typeof handler === 'function') {\n      if (!this[HANDLERS].has(event)) {\n        this[HANDLERS].set(event, new Set());\n      }\n      if (!this[FILTERS].has(event)) {\n        this[FILTERS].add(event);\n        this.base.setEventFilters(Array.from(this[FILTERS]));\n        this.base.register();\n      }\n      this[HANDLERS].get(event).add(handler);\n    }\n  }\n}\n"]}