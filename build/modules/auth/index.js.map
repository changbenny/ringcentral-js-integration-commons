{"version":3,"sources":["modules/auth/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,UAAU,wBAAc,CAC5B,cAD4B,EAE5B,UAF4B,EAG5B,UAH4B,CAAd,CAAhB;;IAMqB,I;;;AACnB,sBAMG;AAAA,QALD,oBAKC,QALD,oBAKC;AAAA,QAJD,WAIC,QAJD,WAIC;AAAA,QAHD,MAGC,QAHD,MAGC;AAAA,QAFD,YAEC,QAFD,YAEC;AAAA,QADD,QACC,QADD,QACC;AAAA;;AAAA,8GACK;AACJ,gDADI;AAEJ,8BAFI;AAGJ,oBAHI;AAIJ;AAJI,KADL;;AAOD,UAAK,QAAQ,YAAb,IAA6B,YAA7B;AACA,UAAK,QAAQ,QAAb,IAAyB,QAAzB;AACA,UAAK,QAAQ,QAAb,IAAyB,mBAAzB;;AAEA,aAAS,EAAT,CAAY,SAAS,MAAT,CAAgB,YAA5B,EAA0C,YAAM;AAC9C,YAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,cAAM,MAAK,OAAL,CAAa;AADD,OAApB;AAGD,KAJD;AAKA,aAAS,EAAT,CAAY,SAAS,MAAT,CAAgB,UAA5B,EAAwC,iBAAS;AAC/C,YAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,cAAM,MAAK,OAAL,CAAa,UADD;AAElB;AAFkB,OAApB;AAID,KALD;AAMA,aAAS,EAAT,CAAY,SAAS,MAAT,CAAgB,aAA5B,EAA2C,YAAM;AAC/C,YAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,cAAM,MAAK,OAAL,CAAa;AADD,OAApB;AAGD,KAJD;AAKA,aAAS,EAAT,CAAY,SAAS,MAAT,CAAgB,YAA5B,EAA0C,iBAAS;AACjD,YAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,cAAM,MAAK,OAAL,CAAa,YADD;AAElB;AAFkB,OAApB;AAID,KALD;;AAOA,aAAS,QAAT,GAAoB,IAApB,CAAyB,UAAC,MAAD,EAAY;AACnC,YAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,cAAM,MAAK,OAAL,CAAa,QADD;AAElB,gBAAQ,SAAS,sBAAY,UAArB,GAAkC,sBAAY;AAFpC,OAApB;AAID,KALD;AAlCC;AAwCF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAsCa,Q,SAAA,Q;YAAU,Q,SAAA,Q;YAAU,S,SAAA,S;YAAW,Q,SAAA,Q;;;;;;AAE3C,qBAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,wBAAM,KAAK,OAAL,CAAa,KADD;AAElB,2BAAS;AACP,sCADO;AAEP,sCAFO;AAGP,wCAHO;AAIP;AAJO;AAFS,iBAApB;;uBASM,KAAK,QAAQ,QAAb,EAAuB,KAAvB,CAA6B;AACjC,oCADiC;AAEjC,oCAFiC;AAGjC,sCAHiC;AAIjC;AAJiC,iBAA7B,C;;;;;;;;;;;;;;;;;;;;;;;;;uBASA,KAAK,QAAQ,QAAb,EAAuB,MAAvB,E;;;;;;;;;;;;;;;;;;;;;;;;;uBAIA,KAAK,QAAQ,QAAb,EAAuB,QAAvB,E;;;kDACC,KAAK,KAAL,CAAW,M;;;;;;;;;;;;;;;;;;wBA7DN;AACZ,aAAO,2BAAW;AAChB,gBAAQ,sBAAY,OADJ;AAEhB,eAAO;AAFS,OAAX,EAGJ,KAAK,MAHD,CAAP;AAID;;;;;kBAtDkB,I","file":"index.js","sourcesContent":["import RcModule from '../../lib/rc-module';\nimport SymbolMap from '../../lib/symbol-map';\n\nimport loginStatus from '../../enums/login-status';\nimport authActions from './auth-actions';\nimport getReducer from './auth-reducer';\n\nconst symbols = new SymbolMap([\n  'defaultBrand',\n  'platform',\n  'handlers',\n]);\n\nexport default class Auth extends RcModule {\n  constructor({\n    registerStoreHandler,\n    stateMapper,\n    prefix,\n    defaultBrand,\n    platform,\n  }) {\n    super({\n      registerStoreHandler,\n      stateMapper,\n      prefix,\n      actions: authActions,\n    });\n    this[symbols.defaultBrand] = defaultBrand;\n    this[symbols.platform] = platform;\n    this[symbols.handlers] = new Map();\n\n    platform.on(platform.events.loginSuccess, () => {\n      this.store.dispatch({\n        type: this.actions.loginSuccess,\n      });\n    });\n    platform.on(platform.events.loginError, error => {\n      this.store.dispatch({\n        type: this.actions.loginError,\n        error,\n      });\n    });\n    platform.on(platform.events.logoutSuccess, () => {\n      this.store.dispatch({\n        type: this.actions.logoutSuccess,\n      });\n    });\n    platform.on(platform.events.refreshError, error => {\n      this.store.dispatch({\n        type: this.actions.refreshError,\n        error,\n      });\n    });\n\n    platform.loggedIn().then((status) => {\n      this.store.dispatch({\n        type: this.actions.initAuth,\n        status: status ? loginStatus.userAccess : loginStatus.notLoggedIn,\n      });\n    });\n  }\n\n  get reducer() {\n    return getReducer({\n      status: loginStatus.pending,\n      error: null,\n    }, this.prefix);\n  }\n  /**\n   * @function ensureClientCredential\n   * @description ensure that a valid token with at least client credential access is obtained\n   * @return {Promise}\n   * */\n  // async ensureClientAccess() {\n  //   // if (await this.getLoggedInStatus() === loginStatus.notLoggedIn) {\n  //   const resp = await this[symbols.platform]._tokenRequest('/restapi/oauth/token', {\n  //     grant_type: 'client_credentials',\n  //     brand_id: this[symbols.defaultBrand].id,\n  //   });\n  //   this[symbols.platform].auth().setData(resp.json());\n  //   // }\n  // }\n\n  /**\n   * @typedef LoginOptions\n   * @type Object\n   * @property {string} username\n   * @property {string} password\n   * @property {string} extension\n   * @property {boolean} remember\n   */\n\n  /**\n   * @function\n   * @description async login function\n   * @param {LoginOptions} options\n   * @return {Promise}\n   */\n  async login({ username, password, extension, remember }) {\n    // dispatch a login action to change status to userAccessPending\n    this.store.dispatch({\n      type: this.actions.login,\n      payload: {\n        username,\n        password,\n        extension,\n        remember,\n      },\n    });\n    await this[symbols.platform].login({\n      username,\n      password,\n      extension,\n      remember,\n    });\n  }\n\n  async logout() {\n    await this[symbols.platform].logout();\n  }\n\n  async getStatus() {\n    await this[symbols.platform].loggedIn();\n    return this.state.status;\n  }\n\n\n}\n"]}