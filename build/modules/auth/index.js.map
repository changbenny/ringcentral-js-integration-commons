{"version":3,"sources":["modules/auth/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/rc-module';\nimport SymbolMap from '../../lib/symbol-map';\nimport Enum from '../../lib/enum';\nimport loginStatus from './login-status';\nimport authActions from './auth-actions';\nimport getAuthReducer from './auth-reducer';\nimport { authEvents, authEventTypes } from './auth-events';\nimport { emit } from '../../lib/utils';\n\n\nconst symbols = new SymbolMap([\n  'platform',\n  'emitter',\n  'beforeLogoutHandlers',\n]);\n\nconst ENUMS = new Enum({\n  loginStatus,\n});\n\n\n/**\n * @class\n * @description Authentication module\n */\nexport default class Auth extends RcModule {\n  /**\n   * @function\n   */\n  constructor(options) {\n    super({\n      ...options,\n      actions: authActions,\n    });\n    const {\n      platform,\n    } = options;\n\n    this[symbols.platform] = platform;\n    this[symbols.beforeLogoutHandlers] = new Set();\n\n    // load info on login\n    platform.on(platform.events.loginSuccess, () => {\n      this.store.dispatch({\n        type: this.actions.loginSuccess,\n      });\n      this::emit(authEventTypes.loginStatusChanged, this.state.status);\n    });\n    // loginError\n    platform.on(platform.events.loginError, error => {\n      this.store.dispatch({\n        type: this.actions.loginError,\n        error,\n      });\n    });\n    // unload info on logout\n    platform.on(platform.events.logoutSuccess, () => {\n      this.store.dispatch({\n        type: this.actions.logoutSuccess,\n      });\n      // this.emit(authEvents.userInfoCleared);\n    });\n\n    platform.on(platform.events.logoutError, error => {\n      this.store.dispatch({\n        type: this.actions.logoutError,\n        error,\n      });\n    });\n\n    platform.on(platform.events.refreshError, error => {\n      this.store.dispatch({\n        type: this.actions.refreshError,\n        error,\n      });\n    });\n\n    // load info if already logged in\n    (async () => {\n      const loggedIn = await platform.loggedIn();\n      this.store.dispatch({\n        type: this.actions.init,\n        status: loggedIn ? loginStatus.loggedIn : loginStatus.notLoggedIn,\n      });\n      this.emit(authEventTypes.loginStatusChanged, this.state.status);\n    })();\n  }\n\n  get reducer() {\n    return getAuthReducer(this.prefix);\n  }\n  /**\n   * @function\n   * @async\n   * @description Login function using username and password\n   */\n  async login({ username, password, extension, remember }) {\n    this.store.dispatch({\n      type: this.actions.login,\n      payload: {\n        username,\n        password,\n        extension,\n        remember,\n      },\n    });\n    this::emit(authEventTypes.loginStatusChanged, authEvents.loggingIn);\n    return await this[symbols.platform].login({\n      username,\n      password,\n      extension,\n      remember,\n    });\n  }\n\n  /**\n   * @function\n   * @description get OAuth page url\n   */\n  loginUrl({ redirectUri, state, brandId, display, prompt }) {\n    return this[symbols.platform].loginUrl({\n      redirectUri,\n      state,\n      brandId,\n      display,\n      prompt,\n    });\n  }\n\n  /**\n   * @function\n   * @param {string} url\n   * @return {Object}\n   */\n  parseLoginUrl(url) {\n    return this[symbols.platform].parseLoginRedirectUrl(url);\n  }\n\n  /**\n   * @function\n   * @async\n   * @description Authorize using OAauth code\n   */\n  async authorize({ code, redirectUri }) {\n    this.store.dispatch({\n      type: this.actions.login,\n      payload: {\n        code,\n        redirectUri,\n      },\n    });\n    this::emit(authEventTypes.loginStatusChanged, authEvents.loggingIn);\n    return await this[symbols.platform].login({\n      code,\n      redirectUri,\n    });\n  }\n\n  /**\n   * @function\n   * @async\n   * @description Log the user out\n   */\n  async logout() {\n    // deal with removing subscriptions\n\n    this::emit(authEventTypes.loginStatusChanged, authEvents.loggingOut);\n    const handlers = [...this[symbols.beforeLogoutHandlers]];\n    for (const handler of handlers) {\n      try {\n        // wraps with async so even normal functions can be awaited\n        // TODO cancel logout if handler resolves to false\n        await (async () => handler())();\n      } catch (e) {\n        // TODO: should emit error\n      }\n    }\n    return await this[symbols.platform].logout();\n  }\n  /**\n   * @function\n   * @param {Function} handler\n   * @returns {Function}\n   */\n  addBeforeLogoutHandler(handler) {\n    this[symbols.beforeLogoutHandlers].add(handler);\n    return () => {\n      this[symbols.beforeLogoutHandlers].remove(handler);\n    };\n  }\n  /**\n   * @function\n   * @param {Function} handler\n   */\n  removeBeforeLogoutHandler(handler) {\n    this[symbols.beforeLogoutHandlers].remove(handler);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get events() {\n    return authEvents;\n  }\n\n  get eventTypes() {\n    return authEventTypes;\n  }\n\n  get enums() {\n    return ENUMS;\n  }\n\n  async isLoggedIn() {\n    return await this[symbols.platform].loggedIn();\n  }\n}\n"]}