{"version":3,"sources":["rc-phone.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA,IAAM,UAAU,uBAAhB;;AAEA,SAAS,2BAAT,GAAuC;AACrC,MAAM,WAAW,mBAAjB;AACA,SAAO,CACL,UAAC,EAAD;AAAA,WAAQ,SAAS,GAAT,CAAa,EAAb,CAAR;AAAA,GADK,EAEL,UAAC,KAAD;AAAA,WAAW,SAAS,OAAT,CAAiB;AAAA,aAAM,GAAG,KAAH,CAAN;AAAA,KAAjB,CAAX;AAAA,GAFK,CAAP;AAID;;IAEoB,O;;;AACnB,yBAMG;AAAA,QALD,oBAKC,QALD,oBAKC;AAAA,QAJD,WAIC,QAJD,WAIC;AAAA,2BAHD,MAGC;AAAA,QAHD,MAGC,+BAHQ,IAGR;AAAA,QAFD,WAEC,QAFD,WAEC;AAAA,QADD,YACC,QADD,YACC;AAAA;;AACD,QAAI,WAAW,oBAAf;AACA,QAAI,gBAAJ;AACA,QAAI,CAAC,QAAL,EAAe;AAAA,kCACS,6BADT;;AAAA;;AACZ,cADY;AACF,aADE;AAEd;;AALA,iHAOK;AACJ,4BAAsB,QADlB;AAEJ;AAFI,KAPL;;AAYD,oCAAgB,KAAhB,EAAuB;;AAErB,mBAAgB,MAAhB;AAFqB,OAGlB,WAHkB,EAAvB;;AAMA,oCAAgB,UAAhB,EAA4B,MAAK,GAAL,CAAS,QAAT,EAA5B;;AAEA,oCAAgB,KAAhB,EAAuB,gCAAsB,MAAK,GAA3B,CAAvB;;AAEA,oCAAgB,UAAhB,EAA4B,uBAAa;AACvC,4BAAsB,QADiB;AAEvC,mBAAa,qBAAC,KAAD;AAAA,eAAW,MAAM,QAAjB;AAAA;AAF0B,KAAb,CAA5B;;AAKA,oCAAgB,cAAhB,EAAgC;AAC9B,4BAAsB,QADQ;AAE9B,cAAW,MAAX,aAF8B;AAG9B,mBAAa,qBAAC,KAAD;AAAA,eAAW,MAAM,YAAjB;AAAA;AAHiB,OAI3B,YAJ2B,EAAhC;AAMA,oCAAgB,MAAhB,EAAwB,mBAAS;AAC/B,4BAAsB,QADS;AAE/B,mBAAa,qBAAC,KAAD;AAAA,eAAW,MAAM,IAAjB;AAAA,OAFkB;AAG/B,oBAH+B;AAI/B,oBAAc,MAAK,YAJY;AAK/B,gBAAU,MAAK;AALgB,KAAT,CAAxB;;AAQA,oCAAgB,MAAhB,EAAwB,mBAAS;AAC/B,4BAAsB,QADS;AAE/B,mBAAa,qBAAC,KAAD;AAAA,eAAW,MAAM,IAAjB;AAAA,OAFkB;AAG/B,oBAH+B;AAI/B,WAAK,MAAK,GAJqB;AAK/B,YAAM,MAAK,IALoB;AAM/B,gBAAU,MAAK,QANgB;AAO/B,gBAAU,MAAK;AAPgB,KAAT,CAAxB;;;AAWA,UAAK,OAAL,IAAgB,4BAAgB;AAC9B,oBAAc,MAAK,YAAL,CAAkB,OADF;AAE9B,YAAM,MAAK,IAAL,CAAU,OAFc;AAG9B,YAAM,MAAK,IAAL,CAAU,OAHc;AAI9B,gBAAU,MAAK,QAAL,CAAc;AAJM,KAAhB,CAAhB;;AAOA,QAAI,OAAJ,EAAa;AACX,cAAQ,wBAAY,MAAK,OAAjB,CAAR;AACD;AA7DA;AA8DF;;;;wBACa;AACZ,aAAO,KAAK,OAAL,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAxEkB,O","file":"rc-phone.js","sourcesContent":["import addModule from './lib/add-module';\nimport RingCentral from 'ringcentral';\nimport RingCentralClient from 'ringcentral-client';\n\nimport RcModule from './lib/rc-module';\n\nimport Settings from './modules/settings';\nimport Brand from './modules/brand';\nimport Auth from './modules/auth';\nimport User from './modules/user';\n\nimport { combineReducers, createStore } from 'redux';\n\nconst REDUCER = Symbol();\n\nfunction getStoreRegisterAndResolver() {\n  const handlers = new Set();\n  return [\n    (fn) => handlers.add(fn),\n    (store) => handlers.forEach(fn => fn(store)),\n  ];\n}\n\nexport default class RcPhone extends RcModule {\n  constructor({\n    registerStoreHandler,\n    stateMapper,\n    prefix = 'rc',\n    sdkSettings,\n    defaultBrand,\n  }) {\n    let register = registerStoreHandler;\n    let resolve;\n    if (!register) {\n      [register, resolve] = getStoreRegisterAndResolver();\n    }\n\n    super({\n      registerStoreHandler: register,\n      stateMapper,\n    });\n\n    this::addModule('sdk', new RingCentral({\n\n      cachePrefix: `${prefix}-`,\n      ...sdkSettings,\n    }));\n\n    this::addModule('platform', this.sdk.platform());\n\n    this::addModule('api', new RingCentralClient(this.sdk));\n\n    this::addModule('settings', new Settings({\n      registerStoreHandler: register,\n      stateMapper: (state) => state.settings,\n    }));\n\n    this::addModule('defaultBrand', new Brand({\n      registerStoreHandler: register,\n      prefix: `${prefix}-default`,\n      stateMapper: (state) => state.defaultBrand,\n      ...defaultBrand,\n    }));\n    this::addModule('auth', new Auth({\n      registerStoreHandler: register,\n      stateMapper: (state) => state.auth,\n      prefix,\n      defaultBrand: this.defaultBrand,\n      platform: this.platform,\n    }));\n\n    this::addModule('user', new User({\n      registerStoreHandler: register,\n      stateMapper: (state) => state.user,\n      prefix,\n      api: this.api,\n      auth: this.auth,\n      platform: this.platform,\n      settings: this.settings,\n    }));\n\n    // combine reducers\n    this[REDUCER] = combineReducers({\n      defaultBrand: this.defaultBrand.reducer,\n      auth: this.auth.reducer,\n      user: this.user.reducer,\n      settings: this.settings.reducer,\n    });\n\n    if (resolve) {\n      resolve(createStore(this.reducer));\n    }\n  }\n  get reducer() {\n    return this[REDUCER];\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @class RcPhone\n * Default RingCentral phone class, provide feature complete ringcentral phone without UI.\n * Application builders can directly use RcBase and build their own phone class if they need\n * different sets of modules.\n */\n// export default class RcPhone extends RcBase {\n//   constructor({\n//     sdkSettings: {\n//       appKey,\n//       appSecret,\n//       cachePrefix = 'rc',\n//       server,\n//     },\n//     brandSettings, // TODO: should we default to rcus?\n//   }) {\n//     super();\n\n//     this.addModule('sdk', new RingCentral({\n//       appKey,\n//       appSecret,\n//       cachePrefix: `${cachePrefix}`,\n//       server,\n//     }));\n\n//     const client = new RingCentralClient(this.sdk);\n//     this.addModule('client', client);\n\n//     this.addModule('brand', new Brand(brandSettings));\n//     this.addModule('auth', new Auth({\n//       ...this,\n//       platform: this.sdk.platform(),\n//     }));\n//   }\n// }\n"]}